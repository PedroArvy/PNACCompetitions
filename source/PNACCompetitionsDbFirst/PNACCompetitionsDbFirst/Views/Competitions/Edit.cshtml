@using PNACCompetitionsDbFirst.Models.ViewModels
@model CompetitionEdit

@{
  ViewBag.Title = "Edit " + @Model.Venue;
}


<style>
  body {
    display: none;
  }
</style>


<div class="row">
  <div class="col-md-8">
    <h2>Edit @Model.Venue</h2>
  </div>
</div>

<script>



  $(function () {

    $("#tabs").tabs();
    $("body").show();

  });


  function AutoComplete(selector, options) {
    $('.competitor').autocomplete({
      source: options,
       maxLength : 0,

      select: function (event, ui) {
        event.preventDefault();
        $(this).val(ui.item.label);
        $(this).next().val(ui.item.value).change();
      }

    }).focus(function() {
      $(this).autocomplete('search', $(this).val());
    });
  }

</script>

<div id="tabs">
  <ul>
    <li><a href="#competitors-tab">Competitors</a></li>
    <li><a href="#details-tab">Details</a></li>
  </ul>

  <div id="details-tab" class="row">
    <div class="col-md-12">

      @using (Html.BeginForm("Edit", "Competitions", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
      {
        @Html.AntiForgeryToken()

        @Html.EditorFor(m => m)
        @Html.HiddenFor(c => c.CompetitionId)
      }

    </div>
  </div>

  <div id="competitors-tab">

    <div class="row">
      <div class="col-md-7">
        <div class="table-responsive">

          <table class="table table-striped">
            <thead>
              <tr>
                <th>Action</th>
                <th>Member</th>
                <th>Captain</th>
                <th>Referee</th>
              </tr>
            </thead>

            <tbody data-bind="foreach: Competitors">

              <tr>
                <td>
                    <a data-bind="click: $parent.DeleteCompetitor, visible: Name().length > 0" class="btn btn-primary btn-sm btn-delete" href="#">Delete</a>
                </td>
                <td>
                  <input class="competitor form-control capitalise" data-bind="value: Name" />
                  <input type="hidden" class="competitorId" data-bind="value: CompetitorId" />
                </td>
                <td>
                  <input type="radio" name="TripCaptain" data-bind="attr: {value: CompetitorId}, click: $parent.CheckTripCaptain, checked: $parent.TripCaptain" />
                </td>
                <td>
                  <input type="checkbox" name="Referee" data-bind="click: $parent.CheckReferee, checked: IsReferee" />
                </td>
              </tr>
            </tbody>
          </table>

          <button data-bind="click: Save" class="btn btn-primary btn-sm">Save</button>
          <button data-bind="click: AddCompetitor" class="btn btn-primary btn-sm">Add a competitor</button>

        </div>
      </div>
    </div>


  </div>

</div>




@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")
}

<script>

  $(document).ready(function () {

    // Class to represent a row in the seat reservations grid
    function CompetitorData(name, competitorId, isTripCaptain, isReferee) {

      var self = this;

      self.Name = ko.observable(name);
      self.CompetitorId = competitorId;
      self.IsTripCaptain = ko.observable(competitorId.toString());

      self.IsReferee = ko.observable(isReferee);
    }


    var entriesViewModel = {
      CompetitionId : @Model.CompetitionId,
      TripCaptain: ko.observable("@Model.TripCaptainId"),
      Competitors: ko.observableArray([
        @Html.Raw(Model.CompetitionEntriesJson())
      ])
    }

    entriesViewModel.AddCompetitor = function () {
      entriesViewModel.Competitors.push(new CompetitorData("", 0, false, false, false));
      AutoComplete('.competitor', members);
    };


    entriesViewModel.CheckTripCaptain = function (competitor) {
      competitor.IsReferee(false);
      return true;
    };


    entriesViewModel.CheckReferee = function (competitor) {

      //alert(root.CompetitionId);
      //alert(competitor.parent);

      if(entriesViewModel.TripCaptain() == competitor.CompetitorId)
      {
        alert('A trip captain cannot be a referee');
        return false;
      }
      else
        return true;

    };


    entriesViewModel.DeleteCompetitor = function (entry) {

      if(confirm('Are you sure you want to delete \'' + entry.Name() + '\'?'))
      {
        $.ajax("/Competitions/DeleteEntry?competitorId=" + entry.CompetitorId + '&competitionId=' + $('#CompetitionId').val(), {
          type: "post", contentType: "application/json",
          success: function (result) 
          {
            if(Boolean(result.success))
            {
              entriesViewModel.Competitors.remove(entry);
            }
          }
        });
      }
    };

    entriesViewModel.Save = function () {

      $.ajax("/Competitions/SaveEntries", {
        data: ko.toJSON(entriesViewModel),
        type: "post", contentType: "application/json",
        success: function (result) 
        { 
          window.location.replace('/competitions/index') ;
        }
      });
    };

    ko.applyBindings(entriesViewModel);

  });

</script>


<script>

  var members = [
    @Html.Raw(Model.MemberNames)
  ];

  $(function () {

    AutoComplete('.competitor', members);

    //clear the control when user tries to edit but restore previous value if nothing chosen
    $('.competitor').click(function () {
      $(this).attr('previous-value', $(this).val());
      $(this).val('');
    }).focusout(function () {

      var value = $(this).val();
      if (value.length == 0)
        $(this).val($(this).attr('previous-value'));
    });

  })


</script>
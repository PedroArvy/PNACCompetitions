@using PNACCompetitionsDbFirst.Models.ViewModels
@model CompetitionEdit

@{
  ViewBag.Title = "Edit " + @Model.Venue;
}


<style>
  body {
    display: none;
  }

  .table-responsive {
    border: none;
    outline: none;
  }

  @@media (max-width: 991px) {
    .entries-row {
      padding: 0;
    }

    .body-content {
      padding: 2px;
    }

    .btn {
      margin-bottom: 10px;
    }
  }
</style>


<div class="row">
  <div class="col-md-8">
    <h2>Edit @Model.Venue</h2>
  </div>
</div>

<script>

  $(function () {

    $("#tabs").tabs();
    $("body").show();

  });



</script>

<div id="tabs">
  <ul>
    <li><a href="#competitors-tab">Competitors</a></li>
    <li><a href="#details-tab">Details</a></li>
  </ul>

  <div id="details-tab" class="row">
    <div class="col-md-12">

      @using (Html.BeginForm("Edit", "Competitions", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
      {
        @Html.AntiForgeryToken()

        @Html.EditorFor(m => m)
        @Html.HiddenFor(c => c.CompetitionId)
      }

    </div>
  </div>

  <div id="competitors-tab">

    <div class="row">
      <div class="col-md-7">
        <div class="table-responsive">

          <table class="table table-striped">
            <thead>
              <tr>
                <th>
                  <span class="hidden-sm hidden-xs hidden-md">Delete</span>
                  <span class="hidden-lg"></span>
                </th>
                <th>Member</th>
                <th>
                  <span class="hidden-sm hidden-xs hidden-md">Captain</span>
                  <span class="hidden-lg">C</span>
                </th>
                <th>
                  <span class="hidden-sm hidden-xs hidden-md">Referee</span>
                  <span class="hidden-lg">R</span>
                </th>
              </tr>
            </thead>

            <tbody data-bind="foreach: Competitors">

              <tr>

                <td>
                  <a data-bind="click: $parent.DeleteCompetitor, visible: parseInt(mySelectedGuid()) > 0" class="btn btn-primary btn-sm btn-delete" href="#">Delete</a>
                  <span data-bind="text:mySelectedGuid"></span>
                </td>

                <td>
                  <input data-bind="event: { blur: BlurName }, click: FocusName, jqAuto: { autoFocus: true }, jqAutoSource: $parent.myPeople, jqAutoValue: mySelectedGuid, jqAutoSourceLabel: 'displayName', jqAutoSourceInputValue: 'Name', jqAutoSourceValue: 'guid'" />
                  <input type="hidden" class="competitorId" data-bind="text:mySelectedGuid" />
                </td>

                <td>
                  <input type="radio" name="TripCaptain" data-bind="attr: {value: mySelectedGuid}, click: $parent.CheckTripCaptain, checked: $parent.TripCaptain, visible: parseInt(mySelectedGuid()) > 0"/>
                </td>

                <td>
                  <input type="checkbox" name="Referee" data-bind="click: $parent.CheckReferee, checked: IsReferee, visible: parseInt(mySelectedGuid()) > 0" />
                </td>

              </tr>

            </tbody>
          </table>

          <button data-bind="click: Save" class="btn btn-primary btn-sm">Save</button>
          <button data-bind="click: AddCompetitor" class="btn btn-primary btn-sm">Add a competitor</button>
          <button data-bind="click: Test" class="btn btn-primary btn-sm">Test</button>

        </div>
      </div>
    </div>


  </div>

</div>




@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")
}

<script>

  $(document).ready(function () {

    function Competitor(competitorId, isReferee) {

      var self = this;

      self.CompetitorId = ko.observable(competitorId);
      self.Name = ko.observable("abc");
      self.IsReferee = ko.observable(isReferee);

      self.mySelectedGuid = ko.observable(competitorId);

      self.tempValue = '';

      self.BlurName = function () {
        if (self.mySelectedGuid().length == 0)
          self.mySelectedGuid(self.tempValue);
        return true;
      }

      self.FocusName = function () {
        self.tempValue = self.mySelectedGuid();
        self.mySelectedGuid('');
        return true;
      }

    }


    function Person(guid, name) {

      this.guid = ko.observable(guid);
      this.Name = ko.observable(name);

      this.displayName = ko.dependentObservable(function () {
        return this.Name();
      }, this);

    }

    var competitorArray = [
      @Html.Raw(Model.MemberNames)
    ];


    var entriesViewModel = {
      CompetitionId : @Model.CompetitionId,
      TripCaptain: ko.observable("@Model.TripCaptainId"),

      myPeople: ko.observableArray(competitorArray),
      mySelectedGuid: ko.observable("3"),

      Competitors: ko.observableArray([
        new Competitor("703", true),
        new Competitor("578", false)
      ]),

    }


    entriesViewModel.Test = function () {
      alert(JSON.stringify( ko.toJSON(entriesViewModel.Competitors)));


     

      return true;
    }


    entriesViewModel.AddCompetitor = function () {
      entriesViewModel.Competitors.push(new Competitor(0, false));
    };


    entriesViewModel.CheckIfFull = function () {
      //alert(entriesViewModel.Competitors().length);
      //alert(entriesViewModel.Competitors()[0].Name());
      var full = true;

      for(var i = 0; i < entriesViewModel.Competitors().length; i++)
      {
        if(entriesViewModel.Competitors()[i].Name().length == 0)
        {
          full = false;
          break;
        }
      }

      if(full)
      {
        entriesViewModel.Competitors.push(new Competitor(0, false));
      }
    };
    


    entriesViewModel.CheckTripCaptain = function (competitor) {
      competitor.IsReferee(false);
      return true;
    };


    entriesViewModel.CheckReferee = function (competitor) {

      if(entriesViewModel.TripCaptain() == competitor.CompetitorId)
      {
        alert('A trip captain cannot be a referee');
        return false;
      }
      else
        return true;

    };


    entriesViewModel.DeleteCompetitor = function (entry) {

      if(confirm('Are you sure you want to delete \'' + entry.Name() + '\'?'))
      {
        $.ajax("/Competitions/DeleteEntry?competitorId=" + entry.CompetitorId + '&competitionId=' + $('#CompetitionId').val(), {
          type: "post", contentType: "application/json",
          success: function (result)
          {
            if(Boolean(result.success))
            {
              entriesViewModel.Competitors.remove(entry);
            }
          }
        });
      }
    };


    entriesViewModel.Save = function () {

      $.ajax("/Competitions/SaveEntries", {
        data: ko.toJSON(entriesViewModel),
        type: "post", contentType: "application/json",
        success: function (result)
        {
          window.location.replace('/competitions/index') ;
        }
      });
    };

    ko.applyBindings(entriesViewModel);

  });

</script>


<script>


  $(function () {

    //clear the control when user tries to edit but restore previous value if nothing chosen
    $('.competitor').click(function () {
      $(this).attr('previous-value', $(this).val());
      $(this).val('');
    }).focusout(function () {

      var value = $(this).val();
      if (value.length == 0)
        $(this).val($(this).attr('previous-value'));
    });

  })


</script>